<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>QSpinBox的valueChanged信号</title>
      <link href="/2023/03/16/QSpinBox%E7%9A%84valueChanged%E4%BF%A1%E5%8F%B7/"/>
      <url>/2023/03/16/QSpinBox%E7%9A%84valueChanged%E4%BF%A1%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<p>​在Qt使用QSpinBox控件和QSlider控件做信号与槽的关联操作时，链接QSpinBox的信号与QSlider的槽时，没有问题。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">QSpinBox *spB_age;</span><br><span class="line">QSlider *sli_age;</span><br><span class="line">spB_age = <span class="keyword">new</span> <span class="built_in">QSpinBox</span>(<span class="keyword">this</span>);</span><br><span class="line">sli_age = <span class="keyword">new</span> <span class="built_in">QSlider</span>(<span class="keyword">this</span>);</span><br><span class="line">spB_age-&gt;<span class="built_in">setRange</span>(<span class="number">0</span>,<span class="number">130</span>);</span><br><span class="line">sli_age-&gt;<span class="built_in">setRange</span>(<span class="number">0</span>,<span class="number">130</span>);</span><br><span class="line"><span class="built_in">connect</span>(sli_age,&amp;QSlider::valueChanged,spB_age,&amp;QSpinBox::setValue);</span><br></pre></td></tr></table></figure><p>​但链接QSlider的信号与QSpinBox的槽时，却报错了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">connect</span>(spB_age,&amp;QSpinBox::valueChanged,sli_age,&amp;QSlider::setValue);</span><br></pre></td></tr></table></figure><p>​通过查阅文档，我们发现QSpinBox::valueChanged()是一个重载函数，有两种类型的参数，编译器识别不出信号类型，无法确定绑定那一个函数。</p><p> <strong>QSpinBox的Signals</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">void valueChanged(int i)</span><br><span class="line">void valueChanged(const QString &amp;text)</span><br><span class="line">1 signal inherited from QAbstractSpinBox</span><br><span class="line">3 signals inherited from QWidget</span><br><span class="line">2 signals inherited from QObject</span><br></pre></td></tr></table></figure><p>​因此需要显示的定义一个函数指针（详情可以看我函数指针专题博客），将函数指针的参数指定为int，</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">void</span> (QSpinBox:: *spinBoxSignal)(<span class="type">int</span>) = &amp;QSpinBox::valueChanged;</span><br></pre></td></tr></table></figure><p>​然后，将这个函数指针作为信号与QSlider的槽函数连接。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connect(spB_age,spinBoxSignal,sli_age,&amp;QSlider::setValue);</span><br></pre></td></tr></table></figure><p>p.s.注意双向数据绑定时，避免发生无限循环。</p>]]></content>
      
      
      <categories>
          
          <category> Qt学习之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QSpinBox控件 </tag>
            
            <tag> valueChanged信号 </tag>
            
            <tag> 信号与槽 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数指针</title>
      <link href="/2023/03/16/%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88/"/>
      <url>/2023/03/16/%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<h3 id="1-什么是函数指针？"><a href="#1-什么是函数指针？" class="headerlink" title="1 什么是函数指针？"></a>1 什么是函数指针？</h3><p>​函数指针，顾名思义，它是一个指向函数的指针，重要的事情说三遍，<strong>是指针，是指针，是指针</strong>。如同C++中其他指针一样，函数指针也有一个指向的地址，这个地址是函数地址，是系统在编译函数时分配个函数的存储空间的首地址。其实我们常见的函数名就是一个函数指针。</p><h3 id="2-函数指针和指针函数"><a href="#2-函数指针和指针函数" class="headerlink" title="2 函数指针和指针函数"></a>2 函数指针和指针函数</h3><p>​知道了什么函数指针后，要怎么定义函数指针呢？可以向定义普通指针变量一样定义它吗？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据类型名 * 指针变量名；</span></span><br><span class="line"><span class="type">int</span> num = <span class="number">5</span>;</span><br><span class="line"><span class="type">char</span> degit = <span class="string">&#x27;3&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> * a = &amp;num;</span><br><span class="line"><span class="type">char</span> * b = &amp;degit;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> *<span class="title">func</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;<span class="comment">//这是指针函数</span></span><br></pre></td></tr></table></figure><p>​<strong>当然不行了，这是定义了一个指针函数</strong>，一个返回值为int指针的函数，本质是函数，可不是我们想要的函数指针。</p><p>​那要如何定义函数指针呢？</p><p><strong>数据类型名 (*指针变量名)(参数列表);</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//首先要有一个函数，</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个函数指针pfunc</span></span><br><span class="line"><span class="built_in">int</span> (*pfunc)(<span class="type">int</span>, <span class="type">int</span>);</span><br><span class="line"><span class="comment">//将func函数的地址赋值给pfunc指针</span></span><br><span class="line">pfunc = func;</span><br></pre></td></tr></table></figure><p>这样我们就得到了一个指向func函数的函数指针。</p><p><strong>思考一下赋值操作，看看可前面的幅值操作有什么不同呢？</strong>  为什么是这样呢？</p><p>p.s.<strong>函数名是一个函数指针哦</strong></p><h3 id="3-使用函数指针调用函数"><a href="#3-使用函数指针调用函数" class="headerlink" title="3 使用函数指针调用函数"></a>3 使用函数指针调用函数</h3><p>那么我们如何使用他呢？其实很简单，但是也挺复杂的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int a = 5;</span><br><span class="line">int b = 6;</span><br><span class="line">cout &lt;&lt;(*pfunc)(a,b)&lt;&lt;endl;</span><br></pre></td></tr></table></figure><p>明明很简单啊，为什么要说复杂呢？</p><p>我们之前说过函数名是一个函数指针，那向函数名那样直接用行不行呢</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int a = 5;</span><br><span class="line">int b = 6;</span><br><span class="line">cout &lt;&lt; &quot;func    &quot;;</span><br><span class="line">cout &lt;&lt;func(a,b)&lt;&lt;endl;</span><br><span class="line">pfunc = func;</span><br><span class="line">cout &lt;&lt;pfunc(a,b)&lt;&lt;endl;</span><br></pre></td></tr></table></figure><p><strong>好像没问题？那问题挺大的</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int func(int a, int b)</span><br><span class="line">&#123;</span><br><span class="line">    return a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    int (*pfunc)(int ,int );</span><br><span class="line">    int a = 5;</span><br><span class="line">    int b = 6;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; &quot;func    &quot;;</span><br><span class="line">    cout &lt;&lt;func(a,b)&lt;&lt;endl;</span><br><span class="line">    pfunc = func;</span><br><span class="line">    cout &lt;&lt;pfunc(a,b)&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; &quot;&amp;func    &quot;;</span><br><span class="line">    pfunc = &amp;func;</span><br><span class="line">    cout &lt;&lt;pfunc(a,b)&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; &quot;*func    &quot;;</span><br><span class="line">    pfunc = *func;</span><br><span class="line">    cout &lt;&lt;pfunc(a,b)&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    pfunc = func;</span><br><span class="line">    cout &lt;&lt; &quot;(*func)(a,b)    &quot;;</span><br><span class="line">    cout &lt;&lt;(*func)(a,b)&lt;&lt;endl;</span><br><span class="line">    cout &lt;&lt; &quot;(*pfunc)(a,b)    &quot;;</span><br><span class="line">    cout &lt;&lt;(*pfunc)(a,b)&lt;&lt;endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*输出结果</span><br><span class="line">func    11</span><br><span class="line">11</span><br><span class="line">&amp;func    11</span><br><span class="line">*func    11</span><br><span class="line">(*func)(a,b)    11</span><br><span class="line">(*pfunc)(a,b)    11</span><br><span class="line"></span><br><span class="line">Process returned 0 (0x0)   execution time : 0.019 s</span><br><span class="line">Press any key to continue.</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p>​啊，这？有这么一种结论，<strong>解引用符*和取地址符&amp;用在函数名之前基本上都是多余的</strong>，好像是这么回事，但是又不知道为什么？</p><h3 id="4-整点花活"><a href="#4-整点花活" class="headerlink" title="4 整点花活"></a>4 整点花活</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int *func(int *a, int b)</span><br><span class="line">&#123;</span><br><span class="line">    return a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    int a[6] = &#123;0,1,2,3,4,5&#125;;</span><br><span class="line">    int *(*pfunc)(int *,int );</span><br><span class="line">    pfunc = func;</span><br><span class="line">    int *p = pfunc(a,3);</span><br><span class="line">    cout &lt;&lt;&quot;p\t&quot;&lt;&lt;p&lt;&lt;endl;</span><br><span class="line">    cout &lt;&lt;&quot;*p\t&quot;&lt;&lt;(*p)&lt;&lt;endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思考一下，func和pfunc的返回值类型，并说明</p><p><strong>函数&#x3D;函数指针，func和pfunc都是函数，也都是函数指针，同时func又是一个指针函数，那么func是一个指针指针还是指针函数指针还是函数指针函数？？？？</strong></p>]]></content>
      
      
      <categories>
          
          <category> C++学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 函数指针 </tag>
            
            <tag> C++ </tag>
            
            <tag> 函数重载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt资源系统</title>
      <link href="/2023/03/11/Qt%E8%B5%84%E6%BA%90%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/03/11/Qt%E8%B5%84%E6%BA%90%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="1-Qt资源系统"><a href="#1-Qt资源系统" class="headerlink" title="1.Qt资源系统"></a>1.Qt资源系统</h3><p>​    <strong>Qt资源管理系统是一种不依赖平台的独特机制，用于在应用程序的可执行文件中存储二进制文件。</strong>出于不同的目的（防止图标文件丢失或恶意更改），开发者不希望本程序的资源文件被更改。因此，把资源文件存储在可执行文件中，这就是<strong>静态加载资源方式</strong>。静态方式的缺点就是编译出的可执行文件容量会增加。为避免这一问题，将资源文件以二进制形式单独存储在一个文件中，这就是<strong>动态加载资源方式</strong>。</p><p>​    Qt 资源系统是基于qmake、 rcc(Qt’s resource compiler), and QFile而实现的。 </p><h3 id="2-资源收集文件-qrc"><a href="#2-资源收集文件-qrc" class="headerlink" title="2. 资源收集文件.qrc"></a>2. 资源收集文件.qrc</h3><p>​那编译器又是如何知道哪些资源文件需要加载到可执行文件中的呢？资源收集文件.qrc闪亮登场。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RCC</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">qresource</span> <span class="attr">prefix</span>=<span class="string">&quot;/img&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span> <span class="attr">alias</span>=<span class="string">&quot;subscript_img&quot;</span>&gt;</span>zhihutubiao.png<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">qresource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">qresource</span> <span class="attr">prefix</span>=<span class="string">&quot;/img/fr&quot;</span> <span class="attr">lang</span>=<span class="string">&quot;fr&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span> <span class="attr">alias</span>=<span class="string">&quot;subscript_img&quot;</span>&gt;</span>zhihutubiao.png<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">qresource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RCC</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    <strong>.qrc文件是基于xml格式的系统资源配置文件。</strong>该文件的file标签指出了项目所需要的资源文件，可以通过alias标签给文件分配资源名称,lang标签是语言标签，可以根据 QLocale::system().name() 返回的语言值选择加载的同名资源文件。指定的路径是相对于包含.qrc文件的目录的,请注意，列出的资源文件必须与.qrc文件位于同一目录或其子目录之一。</p><p>​项目中<strong>访问加载资源有两种方式</strong>：</p><ul><li>文件路径形式：&#x2F;img&#x2F;subscript_img</li><li>URL形式:qrc:&#x2F;&#x2F;&#x2F;img&#x2F;subscript_img</li></ul><h3 id="3-创建资源收集文件-qrc"><a href="#3-创建资源收集文件-qrc" class="headerlink" title="3.创建资源收集文件.qrc"></a>3.创建资源收集文件.qrc</h3><p>​创建资源收集文件最简单的方式就是使用Qt Creator创建。</p><p>​首先需要创建一个Qt Resource File；</p><img src="./add_resorece1.png" style="zoom:50%;" /><p>​然后，右键打开；</p><img src="./add_qrc1.png" style="zoom: 50%;" /><p>​最后，先添加标签，再添加文件。</p><img src="./add_qrc2.png" style="zoom:50%;" /><p>​使用Qt Creator创建和添加资源文件虽然方便，但是在面对大批量的资源文件时却显得力不从心，这就需要手写了。我的建议是熟悉qrc的规则，然后使用代码批量化在某一目录下的获取资源文件，剩下的就是字符串操作了。</p><h3 id="4-加载资源"><a href="#4-加载资源" class="headerlink" title="4.加载资源"></a>4.加载资源</h3><p>​加载资源有两种，一种是直接将资源数据存储在可执行文件中（<strong>静态方式</strong>），另一种是将资源数据存储在单独的二进制文件中并由可执行文件调用（<strong>动态方式</strong>）。</p><h4 id="4-1静态方式"><a href="#4-1静态方式" class="headerlink" title="4.1静态方式"></a>4.1静态方式</h4><p>​除了用 Qt Creator 在工程中添加 qrc 文件以外，需要在 pro 文件中加入 qrc 文件以便 qmake 能识别资源文件，一般这步会被自动添加。</p><p>pro文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RESOURCES += \</span><br><span class="line">    res.qrc</span><br></pre></td></tr></table></figure><h4 id="4-2动态方式"><a href="#4-2动态方式" class="headerlink" title="4.2动态方式"></a>4.2动态方式</h4><p>不会（待填坑）。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p>1.<a href="https://zhuanlan.zhihu.com/p/60457016?utm_id=0">Qt 资源系统（Qt Resource System）</a></p><p>2.<a href="https://blog.csdn.net/xinqingwuji/article/details/108779669">Qt资源系统(The Qt Resource System)</a></p><p>3.<a href="https://www.devbean.net/2012/08/qt-study-road-2-resource-files/">Qt 学习之路 2（9）：资源文件</a></p>]]></content>
      
      
      <categories>
          
          <category> Qt学习之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt资源系统 </tag>
            
            <tag> .qrc文件 </tag>
            
            <tag> 配置文件 </tag>
            
            <tag> 资源加载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode面试题0502二进制转字符串</title>
      <link href="/2023/03/02/leetcode%E9%9D%A2%E8%AF%95%E9%A2%980502%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2023/03/02/leetcode%E9%9D%A2%E8%AF%95%E9%A2%980502%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>将一个六位以内浮点数转化为二进制。</p><h2 id="我的思路"><a href="#我的思路" class="headerlink" title="我的思路"></a>我的思路</h2><p>输入浮点数数字 $n$, 其可以转化为二进制的情况如下<br>$$<br>a_1*(\frac{1}{2})^1+a_2*(\frac{1}{2})^2+a_3*(\frac{1}{2})^3+a_4*(\frac{1}{2})^4+a_15*(\frac{1}{2})^5+a_6*(\frac{1}{2})^6&#x3D;n<br>$$</p><p>不用考虑6次方之后的情况，因为会超出位数；<br>等式两边同时 $ <em>10^6 $<br>$$<br>500000a_1+250000a_2+…&#x3D;n</em>10^6<br>$$<br>接下来就用 $ n*10^6 $ 从大到小依次减去a的参数，如果最后 $n$ 不为0，则返回”ERROR”;<br>否则返回” $0.a_1a_2a_3a_4a_5a_6$ “，最后处理一下末尾多余的0就可以了</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">printBin</span><span class="params">(<span class="type">double</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> integer_num = <span class="built_in">int</span> (num*<span class="number">1000000</span>);</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; five;</span><br><span class="line">        <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> b = <span class="number">1000000</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">7</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            b = b/<span class="number">10</span>;</span><br><span class="line">            a = a*<span class="number">5</span>;</span><br><span class="line">            <span class="keyword">if</span> (b&gt;<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                five.<span class="built_in">push_back</span>(a*b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        b = <span class="number">1000000</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;five.<span class="built_in">size</span>();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (five[i]&lt;=integer_num)</span><br><span class="line">            &#123;</span><br><span class="line">                ans.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">                integer_num = integer_num-five[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                ans.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            b=b/<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (integer_num&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            string a =<span class="string">&quot;ERROR&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i=ans.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (ans[i]!=<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ans.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            string a=<span class="string">&quot;0.&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;ans.<span class="built_in">size</span>();i++)</span><br><span class="line">            &#123;</span><br><span class="line">                a += <span class="built_in">to_string</span>(ans[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="缺点与优点"><a href="#缺点与优点" class="headerlink" title="缺点与优点"></a>缺点与优点</h2><p>缺点：</p><p>1.处理情况有限；</p><p>2.字符与数字转化繁琐。</p><p>优点：</p><p>1.避开了浮点数精度丢失的问题（因为全程使用整数处理）。</p><h2 id="官方解题思路"><a href="#官方解题思路" class="headerlink" title="官方解题思路"></a>官方解题思路</h2><p>​    将实数的十进制表示转换成二进制表示的方法是：每次将实数乘以2，将此时的整数部分添加到二进制表示的末尾，然后将整数部分置为0，重复上述操作，直到小数部分变成0或者小数部分出现循环时结束操作。当小数部分变成0时，得到二进制表示下的有限小数；当小数部分出现循环时，得到二进制表示下的无限循环小数。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>官方思路能处理的情况比我的要多很多，还在避开浮点数尾数精度不足的同时，避开了复杂的字符与数字转化。</p><p><strong>乘2是一个非常巧妙的思想，既然十进制整数可以除以2来变形，小数乘2应该是最好的思想了</strong></p>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 贪心 </tag>
            
            <tag> 进制转换 </tag>
            
            <tag> 浮点数 </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KMP算法入门</title>
      <link href="/2023/02/23/KMP%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/"/>
      <url>/2023/02/23/KMP%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串匹配 </tag>
            
            <tag> KMP算法 </tag>
            
            <tag> next数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Hexo和github搭建个人博客</title>
      <link href="/2023/02/23/%E4%BD%BF%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/02/23/%E4%BD%BF%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h1><p>1.github账号</p><p>2.git for Windows</p><p>3.node.js</p><p>4.npm</p><h2 id="Github账号"><a href="#Github账号" class="headerlink" title="Github账号"></a>Github账号</h2><p>Github 仓库是你博客存储的地方，是构建博客的起点，点击<a href="https://github.com/">这里</a>去官网注册一个就好了。</p><h2 id="Git-for-windows"><a href="#Git-for-windows" class="headerlink" title="Git for windows"></a>Git for windows</h2><p>Git for Windows是用来将你的博客生成并部署到github上，当然在其他步骤中它的作用也不可或缺。但是Git for Windows.   国内直接从<a href="http://git-scm.com/download/win">官网</a>下载比较困难，需要翻墙。<a href="https://github.com/Sjj1024/Git-win.git">这里</a>提供一个国内的下载站，方便网友下载。</p><h2 id="node-js和npm"><a href="#node-js和npm" class="headerlink" title="node.js和npm"></a>node.js和npm</h2><p><a href="https://nodejs.org/en/download/">官网</a>下载适合你的node.js，推荐下载.msi文件，因为.msi文件可以自动帮你配置环境变量，省时方便，何乐而不为呢（<font color=#FF0000>但是这里要注意以管理员身份运行，不然会因没有权限更改环境变量而出现the error code is 2502，the error code is 2503</font>）点<a href="https://jingyan.baidu.com/article/6f2f55a15bf1d3b5b93e6c03.html">这里</a>学会如何以管理员身份运行.msi文件。最新版的node.js已经集成了npm，所以不需要额外安装npm。安装完成后可以运行Git Bush，在其中输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>出现相应版本号即安装成功。</p><p>为了能有一个更好的下载体验，建议将将npm的注册表源设置为国内的镜像。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#获得原来的镜像地址</span><br><span class="line">npm get registry</span><br><span class="line">#设置为淘宝镜像</span><br><span class="line">npm config set registry http://registry.npm.taobao.org/</span><br><span class="line">#换成原来的</span><br><span class="line">npm config set registry https://registry.npmjs.org/</span><br></pre></td></tr></table></figure><h1 id="二、创建GitHub博客仓库"><a href="#二、创建GitHub博客仓库" class="headerlink" title="二、创建GitHub博客仓库"></a>二、创建GitHub博客仓库</h1><p>1.创建仓库</p><p>2.配置SSH key</p><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>这一步登录你的github后，创建一个与你github重名的仓库，这里注意，此处只能创建与你github用户名一样的用户名，比如我的github用户名是SeanAristotle，那我的仓库名一定要是这个，等后续工作完成后，只需要打开:   <a href="https://seanaristotle.github.io/">https://seanaristotle.github.io</a> 就可以看到我的博客了。创建仓库需要一定的时间，大约需要半个小时，耐心等待即可。</p><h2 id="配置SSH-Key"><a href="#配置SSH-Key" class="headerlink" title="配置SSH Key"></a>配置SSH Key</h2><p>首先，先确定你是否有SSH Key，打开你的用户根目录，看看是否有.ssh这个文件夹，文件夹下是否有id_rsa和id_rsa.pub这两个文件。</p><img src="./ssh位置.png" style="zoom:50%;" /><p>如果没有，就需要打开刚刚装好的Git Bush，输入下面的代码来创建(xxxx部分就是你的邮件地址)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;xxxx@xxx.com&quot;</span><br></pre></td></tr></table></figure><p>然后，将SSH Key加到你的github中就可以了。</p><p>打开settings，</p><img src="./github的setting.png" style="zoom:67%;" /><p>然后新建SSH keys ，填入pub公钥就OK了。</p><img src="./SSH的设置.png" style="zoom:50%;" /><h1 id="三、安装并使用Hexo"><a href="#三、安装并使用Hexo" class="headerlink" title="三、安装并使用Hexo"></a>三、安装并使用Hexo</h1><p>1.安装Hexo</p><p>2.初始化</p><p>3.部署到GitHub</p><p>4.大功告成，写博客</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>这步so easy，打开你的Git Bush 输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><p>OK，这一步基本完成，如果出现： command not found: hexo可以参考<a href="https://www.jianshu.com/p/1851395f1f5f?utm_campaign=maleskine&utm_content=note&utm_medium=seo_notes&utm_source=recommendation">这里</a></p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>在电脑中选择一部分空间作为你博客的存储空间，然后打开Git Bush，进入这个目录，（如，我的文件目录是D:&#x2F;Git&#x2F;blog）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 进入目录</span><br><span class="line">cd D:/Git/blog</span><br><span class="line"># 初始化</span><br><span class="line">hexo init</span><br><span class="line"># 生成</span><br><span class="line">hexo g</span><br><span class="line"># 启动</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>稍作等待，打开浏览器，访问<a href="http://localhost:4000就可以看到你的博客啦。如果4000这个端口被占用了，可以参考[这里](https://blog.csdn.net/Quincylk/article/details/8260309)来取舍到底哪个端口换一下。">http://localhost:4000就可以看到你的博客啦。如果4000这个端口被占用了，可以参考[这里](https://blog.csdn.net/Quincylk/article/details/8260309)来取舍到底哪个端口换一下。</a></p><h2 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h2><p>首先，到你的博客根目录中的_config.yml文件中，修改deploy部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git </span><br><span class="line">    repo: git@github.com:SeanAristotle/SeanAristotle.github.io.git</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure><p>这里好像有点问题，但是不确定，等出现有人问问题再填坑吧！</p><p>然后打开Git Bush，安装插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git</span><br></pre></td></tr></table></figure><p>最后只要使用下面命令部署到github上就OK了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d </span><br></pre></td></tr></table></figure><h2 id="大功告成，写博客"><a href="#大功告成，写博客" class="headerlink" title="大功告成，写博客"></a>大功告成，写博客</h2><p>这下，你就可以开始写博客了，初始化时生成了个hello Hexo，里面有快捷指令的用法，然后就可以写博客了。</p><p>其实，只要记住三个命令就可以基本操作了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#创建新博客</span><br><span class="line">hexo new xxx</span><br><span class="line">#本地浏览</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line">hexo s -g    # 一句顶上面两句</span><br><span class="line">#上传部署到github</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br><span class="line">hexo d -g     #同理</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>推荐一下我的Markdown编辑器[Tpora](<a href="https://typoraio.cn/">Typora 官方中文站 (typoraio.cn)</a>),感觉超级好用。</p><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><pre><code>  关于主题，不建议不懂前端没有网页基础的人上来就搞，有这个时间多写两篇博客它不香吗？   希望自己有时间多写写，不管干什么，多学习，多总结总会有收获的。</code></pre><p>p.s.推荐一款好看的主题，从头到尾都有教程，省心又好看！！！</p><h2 id="参考-amp-感谢"><a href="#参考-amp-感谢" class="headerlink" title="参考&amp;感谢"></a>参考&amp;感谢</h2><h3 id="包含但不限于文中链接和以下内容："><a href="#包含但不限于文中链接和以下内容：" class="headerlink" title="包含但不限于文中链接和以下内容："></a>包含但不限于文中链接和以下内容：</h3><p><a href="https://www.cnblogs.com/debugxw/p/11006734.html">https://www.cnblogs.com/debugxw/p/11006734.html</a></p><p><a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html#%E4%B8%8A%E4%BC%A0%E5%88%B0github">https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html#%E4%B8%8A%E4%BC%A0%E5%88%B0github</a></p><p><a href="https://garybear.cn/hexo-theme-meadow/doc/#/">https://garybear.cn/hexo-theme-meadow/doc/#/</a></p>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/02/22/hello-world/"/>
      <url>/2023/02/22/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
